use std::any::{Any, TypeId};

mod app;
mod context;
mod query;

pub mod prelude {
    pub use crate::app::*;
    pub use crate::context::*;
    pub use crate::query::*;
    pub use crate::*;
}

pub trait Component: 'static + Send {
    fn get_type_id(&self) -> TypeId {
        TypeId::of::<Self>()
    }

    fn as_any(&self) -> &dyn Any;
}

fn concrete_component<'e, T: Component>(obj: &dyn Component) -> Option<&'e T> {
    (obj as &dyn Any).downcast_ref()
}
